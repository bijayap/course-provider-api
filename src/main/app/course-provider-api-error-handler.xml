<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
	<choice-exception-strategy name="GeneralExceptionStrategy">
		<catch-exception-strategy
			when="#[exception.causedBy(org.mule.extension.validation.api.ValidationException)]"
			doc:name="Catch Input Data Validation Exceptions">
			<message-properties-transformer scope="invocation"
				doc:name="Set Error Message and Description">
				<add-message-property key="errorMessage" value="Input Data Invalid" />
				<add-message-property key="errorDescription"
					value="#[exception.message.toString()]" />
				<add-message-property key="successFlag" value="false" />
				<add-message-property key="statusCode" value="400" />
				<add-message-property key="httpErrorReason"
					value="Bad Request" />
			</message-properties-transformer>
			<set-property propertyName="http.status" value="#[flowVars.statusCode]"
				doc:name="Set HTTP Status code" />
			<set-property propertyName="http.reason" value="#[flowVars.httpErrorReason]"
				doc:name="Set HTTP Reason" />
			<dw:transform-message doc:name="Transform Message">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"error" : {
      "errorMessage": flowVars.errorMessage,
      "errorDescription": flowVars.errorDescription
    },
    "success": flowVars.successFlag,
    "status": flowVars.statusCode
}]]></dw:set-payload>
			</dw:transform-message>
		</catch-exception-strategy>
		<catch-exception-strategy doc:name="Illegal Argument Exception Strategy"
			when="#[exception.causedBy(java.lang.IllegalArgumentException)]">
			<message-properties-transformer scope="invocation"
				doc:name="Set Error Message and Description">
				<add-message-property key="errorMessage" value="Input Data Invalid" />
				<add-message-property key="errorDescription"
					value="#[exception.message.toString()]" />
				<add-message-property key="successFlag" value="false" />
				<add-message-property key="statusCode" value="400" />
				<add-message-property key="httpErrorReason"
					value="Bad Request" />
			</message-properties-transformer>
			<set-property propertyName="http.status" value="#[flowVars.statusCode]"
				doc:name="Set HTTP Status code" />
			<set-property propertyName="http.reason" value="#[flowVars.httpErrorReason]"
				doc:name="Set HTTP Reason" />
			<dw:transform-message doc:name="Transform Message">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"error" : {
      "errorMessage": flowVars.errorMessage,
      "errorDescription": flowVars.errorDescription
    },
    "success": flowVars.successFlag,
    "status": flowVars.statusCode
}]]></dw:set-payload>
			</dw:transform-message>
		</catch-exception-strategy>
		<catch-exception-strategy doc:name="Database Connection Exception Strategy"
			when="#[exception.causedBy(org.mule.module.db.internal.domain.connection.ConnectionCreationException)]">
			<message-properties-transformer scope="invocation"
				doc:name="Set Error Message and Description">
				<add-message-property key="errorMessage"
					value="Database Connection Error" />
				<add-message-property key="errorDescription"
					value="#[exception.message.toString()]" />
				<add-message-property key="successFlag" value="false" />
				<add-message-property key="statusCode" value="500" />
				<add-message-property key="httpErrorReason"
					value="Internal Server Error" />
			</message-properties-transformer>
			<set-property propertyName="http.status" value="#[flowVars.statusCode]"
				doc:name="Set HTTP Status code" />
			<set-property propertyName="http.reason" value="#[flowVars.httpErrorReason]"
				doc:name="Set HTTP Reason" />
			<dw:transform-message doc:name="Transform Message">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"error" : {
      "errorMessage": flowVars.errorMessage,
      "errorDescription": flowVars.errorDescription
    },
    "success": flowVars.successFlag,
    "status": flowVars.statusCode
}]]></dw:set-payload>
			</dw:transform-message>
		</catch-exception-strategy>
		<catch-exception-strategy doc:name="Unhandled Exception Strategy">
			<message-properties-transformer scope="invocation"
				doc:name="Set Error Message and Description">
				<add-message-property key="errorMessage"
					value="Database Connection Error" />
				<add-message-property key="errorDescription"
					value="#[exception.message.toString()]" />
				<add-message-property key="successFlag" value="false" />
				<add-message-property key="statusCode" value="500" />
				<add-message-property key="httpErrorReason"
					value="Internal Server Error" />
			</message-properties-transformer>
			<set-property propertyName="http.status" value="#[flowVars.statusCode]"
				doc:name="Set HTTP Status code" />
			<set-property propertyName="http.reason" value="#[flowVars.httpErrorReason]"
				doc:name="Set HTTP Reason" />
			<dw:transform-message doc:name="Transform Message">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"error" : {
      "errorMessage": flowVars.errorMessage,
      "errorDescription": flowVars.errorDescription
    },
    "success": flowVars.successFlag,
    "status": flowVars.statusCode
}]]></dw:set-payload>
			</dw:transform-message>
		</catch-exception-strategy>
	</choice-exception-strategy>
</mule>
