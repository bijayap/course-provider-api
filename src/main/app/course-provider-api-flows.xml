<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
	<ee:object-store-caching-strategy
		name="All_Courses_Caching_Strategy" keyGenerationExpression="#[flowVars.cacheKey]"
		doc:name="Caching Strategy">
		<in-memory-store name="all_courses_chache"
			maxEntries="${maxEntryForCachingAllCourses}" entryTTL="${ttlForCachingAllCourses}"
			expirationInterval="${expireIntervalForCachingAllCourses}" />
	</ee:object-store-caching-strategy>
	<ee:object-store-caching-strategy
		name="Latest_Courses_Caching_Strategy" keyGenerationExpression="#[flowVars.cacheKey]"
		doc:name="Caching Strategy">
		<in-memory-store name="latest_courses_cache"
			maxEntries="${maxEntryForCachingLatestCourses}" entryTTL="${ttlForCachingLatestCourses}"
			expirationInterval="${expireIntervalForCachingLatestCourses}" />
	</ee:object-store-caching-strategy>
    <ee:object-store-caching-strategy name="Specific_Course_Caching_Strategy" keyGenerationExpression="#[flowVars.cacheKey]" doc:name="Caching Strategy">
        <in-memory-store name="specific_course_cache" maxEntries="${maxEntryForCachingSpecificCourse}" entryTTL="${ttlForCachingSpecificCourse}" expirationInterval="${expireIntervalForCachingSpecificCourse}"/>
    </ee:object-store-caching-strategy>
	<flow name="getCoursesFlow">
		<flow-ref name="initialDataValidation" doc:name="initialDataValidation" />
		<message-properties-transformer
			encoding="ISO-8859-4" scope="invocation" doc:name="Initialize Page Counters">
			<add-message-property key="startCourseId"
				value="#[message.inboundProperties.'http.query.params'.offset]" />
			<add-message-property key="endCourseId"
				value="#[Integer.parseInt(message.inboundProperties.'http.query.params'.offset) + Integer.parseInt(message.inboundProperties.'http.query.params'.limit)]" />
			<add-message-property key="currentLimit"
				value="#[message.inboundProperties.'http.query.params'.limit]" />
		</message-properties-transformer>
		<set-variable variableName="cacheKey"
			value="#[message.inboundProperties.'http.request.path']" doc:name="Set cacheKey" />
		<ee:cache cachingStrategy-ref="All_Courses_Caching_Strategy"
			doc:name="Caching courses information">
			<db:select config-ref="Generic_Database_Configuration1"
				doc:name="Get courses from DB">
				<db:template-query-ref name="fetch_all_courses" />
			</db:select>
			<logger message="&quot;Query Response from DB --&gt;&quot; #[payload]"
				level="DEBUG" doc:name="Debug Log" />
		</ee:cache>
		<logger message="&quot;Query Response from cache --&gt;&quot; #[payload]"
			level="DEBUG" doc:name="Debug Log" />
		<flow-ref name="validateAndSetCounters" doc:name="validateAndSetCounters" />
		<set-variable variableName="currentCourseList"
			value="#[payload.subList(flowVars.startCourseId,flowVars.endCourseId)]"
			doc:name="Set currentCourseList" />
		<dw:transform-message doc:name="Building Response">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	nextOffSet: flowVars.endCourseId,
	currentLimit: flowVars.currentLimit,
	totalCourses: flowVars.totalCourseCount,
	remainingCourses: flowVars.totalCourseCount - flowVars.endCourseId,
	courses: flowVars.currentCourseList map {
		courseId: $.ID,
		code: $.CODE,
		name: $.NAME,
		field: $.FIELD,
		level: $.LEVEL,
		mode: $.MODE,
		begins: $.BEGINS,
		duration: $.DURATION,
		fees: $.FEES,
		listed_on: $.LISTED_ON
	},
	success: true,
	status: 200
}]]></dw:set-payload>
		</dw:transform-message>
		<exception-strategy ref="GeneralExceptionStrategy"
			doc:name="Reference Exception Strategy" />
	</flow>
	<flow name="getLatestCoursesFlow">
		<flow-ref name="initialDataValidation" doc:name="initialDataValidation" />
		<validation:matches-regex message="duration value should be more than 1"
			value="#[message.inboundProperties.'http.query.params'.duration]"
			regex="^\d+$" doc:name="Validate duration" />
		<message-properties-transformer
			encoding="ISO-8859-4" scope="invocation" doc:name="Initialize Page Counters">
			<add-message-property key="startCourseId"
				value="#[message.inboundProperties.'http.query.params'.offset]" />
			<add-message-property key="endCourseId"
				value="#[Integer.parseInt(message.inboundProperties.'http.query.params'.offset) + Integer.parseInt(message.inboundProperties.'http.query.params'.limit)]" />
			<add-message-property key="currentLimit"
				value="#[message.inboundProperties.'http.query.params'.limit]" />
		</message-properties-transformer>
		<set-variable variableName="cacheKey"
			value="#[message.inboundProperties.'http.request.uri']" doc:name="Set cacheKey" />
		<ee:cache doc:name="Caching latest course information"
			cachingStrategy-ref="Latest_Courses_Caching_Strategy">
			<db:select config-ref="Generic_Database_Configuration1"
				doc:name="Getting From Database">
				<db:template-query-ref name="fetch_all_latest_courses" />
				<db:in-param name="duration" type="INTEGER"
					value="#[message.inboundProperties.'http.query.params'.duration]" />
			</db:select>
			<logger level="DEBUG" doc:name="Debug Log"
				message="&quot;Query Response from DB --&gt;&quot; #[payload]" />
		</ee:cache>
		<logger
			message="&quot;Query Response from cache --&gt;&quot; #[payload]"
			level="DEBUG" doc:name="Debug Log" />
		<flow-ref name="validateAndSetCounters" doc:name="validateAndSetCounters" />
		<set-variable variableName="currentCourseList"
			value="#[payload.subList(flowVars.startCourseId,flowVars.endCourseId)]"
			doc:name="Set currentCourseList" />
		<dw:transform-message doc:name="Building Response">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	nextOffSet: flowVars.endCourseId,
	currentLimit: flowVars.currentLimit,
	totalCourses: flowVars.totalCourseCount,
	remainingCourses: flowVars.totalCourseCount - flowVars.endCourseId,
	courses: flowVars.currentCourseList map {
		courseId: $.ID,
		code: $.CODE,
		name: $.NAME,
		field: $.FIELD,
		level: $.LEVEL,
		mode: $.MODE,
		begins: $.BEGINS,
		duration: $.DURATION,
		fees: $.FEES,
		listed_on: $.LISTED_ON
	},
	success: true,
	status: 200
}]]></dw:set-payload>
		</dw:transform-message>
		<exception-strategy ref="GeneralExceptionStrategy"
			doc:name="Reference Exception Strategy" />
	</flow>
	<flow name="getCourseIdFlow">
		<validation:matches-regex message="courseId value should be 1 or more"
			value="#[flowVars.courseId]" regex="^\d+$" doc:name="Validate courseId" />
		<set-variable variableName="cacheKey"
			value="#[message.inboundProperties.'http.request.uri']" doc:name="Set cacheKey" />
        <ee:cache cachingStrategy-ref="Specific_Course_Caching_Strategy" doc:name="Caching course information">
            <db:select config-ref="Generic_Database_Configuration1" doc:name="Getting From Database">
                <db:template-query-ref name="fetch_course_by_id"/>
                <db:in-param name="id" type="INTEGER" value="#[flowVars.courseId]"/>
            </db:select>
            <logger message="&quot;Query Response from DB --&gt;&quot; #[payload]" level="DEBUG" doc:name="Debug Log"/>
        </ee:cache>
        <logger message="&quot;Query Response from cache --&gt;&quot; #[payload]" level="DEBUG" doc:name="Debug Log"/>
        <validation:validate-size message="No course with provided courseId exists, Please check courseId" value="#[payload]" min="1" doc:name="Validate Empty Result"/>
		<dw:transform-message doc:name="Building Response"
			metadata:id="b0acc3bf-c0b1-4005-ba8f-7015f5ba0e55">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	course: payload map {
		courseId: $.ID,
		code: $.CODE,
		name: $.NAME,
		field: $.FIELD,
		level: $.LEVEL,
		mode: $.MODE,
		begins: $.BEGINS,
		duration: $.DURATION,
		fees: $.FEES,
		listed_on: $.LISTED_ON
	},
	success: true,
	status: 200	
}]]></dw:set-payload>
		</dw:transform-message>
		<exception-strategy ref="GeneralExceptionStrategy"
			doc:name="Reference Exception Strategy" />
	</flow>
	<sub-flow name="initialDataValidation">
		<validation:matches-regex message="offset value should be 0 or greater than 1"
			value="#[message.inboundProperties.'http.query.params'.offset]"
			regex="^\d+$" doc:name="Validate offset" />
		<validation:matches-regex message="limit value should be greater than 1"
			value="#[message.inboundProperties.'http.query.params'.limit]" regex="^\d+$"
			doc:name="Validate limit" />
	</sub-flow>
	<sub-flow name="validateAndSetCounters">
		<set-variable variableName="totalCourseCount" value="#[payload.size()]"
			doc:name="Set totalCourseCount" />
		<choice doc:name="Choice">
			<when expression="#[flowVars.startCourseId &gt; flowVars.totalCourseCount]">
				<set-variable variableName="startCourseId" value="0"
					doc:name="Reset startCourseId" />
			</when>
			<otherwise>
				<logger message="Into Default Flow for startCourseId Reset - ALL is Well"
					level="DEBUG" doc:name="Logger" />
			</otherwise>
		</choice>
		<choice doc:name="Choice">
			<when expression="#[flowVars.endCourseId &gt; flowVars.totalCourseCount]">
				<set-variable variableName="endCourseId"
					value="#[flowVars.totalCourseCount]" doc:name="Reset endCourseId" />
			</when>
			<otherwise>
				<logger message="Into Default Flow for endCourseId Reset - ALL is Well"
					level="DEBUG" doc:name="Logger" />
			</otherwise>
		</choice>
	</sub-flow>
</mule>
